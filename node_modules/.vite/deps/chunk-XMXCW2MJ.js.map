{
  "version": 3,
  "sources": ["../../immer/src/utils/env.ts", "../../immer/src/utils/errors.ts", "../../immer/src/utils/common.ts", "../../immer/src/utils/plugins.ts", "../../immer/src/core/scope.ts", "../../immer/src/core/finalize.ts", "../../immer/src/core/proxy.ts", "../../immer/src/core/immerClass.ts", "../../immer/src/core/current.ts", "../../immer/src/plugins/es5.ts", "../../immer/src/plugins/patches.ts", "../../immer/src/plugins/mapset.ts", "../../immer/src/plugins/all.ts", "../../immer/src/immer.ts", "../../immer/dist/index.js"],
  "sourcesContent": ["// Should be no imports here!\n\n// Some things that should be evaluated before all else...\n\n// We only want to know if non-polyfilled symbols are available\nconst hasSymbol =\n\ttypeof Symbol !== \"undefined\" && typeof Symbol(\"x\") === \"symbol\"\nexport const hasMap = typeof Map !== \"undefined\"\nexport const hasSet = typeof Set !== \"undefined\"\nexport const hasProxies =\n\ttypeof Proxy !== \"undefined\" &&\n\ttypeof Proxy.revocable !== \"undefined\" &&\n\ttypeof Reflect !== \"undefined\"\n\n/**\n * The sentinel value returned by producers to replace the draft with undefined.\n */\nexport const NOTHING: Nothing = hasSymbol\n\t? Symbol.for(\"immer-nothing\")\n\t: ({[\"immer-nothing\"]: true} as any)\n\n/**\n * To let Immer treat your class instances as plain immutable objects\n * (albeit with a custom prototype), you must define either an instance property\n * or a static property on each of your custom classes.\n *\n * Otherwise, your class instance will never be drafted, which means it won't be\n * safe to mutate in a produce callback.\n */\nexport const DRAFTABLE: unique symbol = hasSymbol\n\t? Symbol.for(\"immer-draftable\")\n\t: (\"__$immer_draftable\" as any)\n\nexport const DRAFT_STATE: unique symbol = hasSymbol\n\t? Symbol.for(\"immer-state\")\n\t: (\"__$immer_state\" as any)\n\n// Even a polyfilled Symbol might provide Symbol.iterator\nexport const iteratorSymbol: typeof Symbol.iterator =\n\t(typeof Symbol != \"undefined\" && Symbol.iterator) || (\"@@iterator\" as any)\n\n/** Use a class type for `nothing` so its type is unique */\nexport class Nothing {\n\t// This lets us do `Exclude<T, Nothing>`\n\t// @ts-ignore\n\tprivate _!: unique symbol\n}\n", "const errors = {\n\t0: \"Illegal state\",\n\t1: \"Immer drafts cannot have computed properties\",\n\t2: \"This object has been frozen and should not be mutated\",\n\t3(data: any) {\n\t\treturn (\n\t\t\t\"Cannot use a proxy that has been revoked. Did you pass an object from inside an immer function to an async process? \" +\n\t\t\tdata\n\t\t)\n\t},\n\t4: \"An immer producer returned a new value *and* modified its draft. Either return a new value *or* modify the draft.\",\n\t5: \"Immer forbids circular references\",\n\t6: \"The first or second argument to `produce` must be a function\",\n\t7: \"The third argument to `produce` must be a function or undefined\",\n\t8: \"First argument to `createDraft` must be a plain object, an array, or an immerable object\",\n\t9: \"First argument to `finishDraft` must be a draft returned by `createDraft`\",\n\t10: \"The given draft is already finalized\",\n\t11: \"Object.defineProperty() cannot be used on an Immer draft\",\n\t12: \"Object.setPrototypeOf() cannot be used on an Immer draft\",\n\t13: \"Immer only supports deleting array indices\",\n\t14: \"Immer only supports setting array indices and the 'length' property\",\n\t15(path: string) {\n\t\treturn \"Cannot apply patch, path doesn't resolve: \" + path\n\t},\n\t16: 'Sets cannot have \"replace\" patches.',\n\t17(op: string) {\n\t\treturn \"Unsupported patch operation: \" + op\n\t},\n\t18(plugin: string) {\n\t\treturn `The plugin for '${plugin}' has not been loaded into Immer. To enable the plugin, import and call \\`enable${plugin}()\\` when initializing your application.`\n\t},\n\t20: \"Cannot use proxies if Proxy, Proxy.revocable or Reflect are not available\",\n\t21(thing: string) {\n\t\treturn `produce can only be called on things that are draftable: plain objects, arrays, Map, Set or classes that are marked with '[immerable]: true'. Got '${thing}'`\n\t},\n\t22(thing: string) {\n\t\treturn `'current' expects a draft, got: ${thing}`\n\t},\n\t23(thing: string) {\n\t\treturn `'original' expects a draft, got: ${thing}`\n\t},\n\t24: \"Patching reserved attributes like __proto__, prototype and constructor is not allowed\"\n} as const\n\nexport function die(error: keyof typeof errors, ...args: any[]): never {\n\tif (__DEV__) {\n\t\tconst e = errors[error]\n\t\tconst msg = !e\n\t\t\t? \"unknown error nr: \" + error\n\t\t\t: typeof e === \"function\"\n\t\t\t? e.apply(null, args as any)\n\t\t\t: e\n\t\tthrow new Error(`[Immer] ${msg}`)\n\t}\n\tthrow new Error(\n\t\t`[Immer] minified error nr: ${error}${\n\t\t\targs.length ? \" \" + args.map(s => `'${s}'`).join(\",\") : \"\"\n\t\t}. Find the full error at: https://bit.ly/3cXEKWf`\n\t)\n}\n", "import {\n\tDRAFT_STATE,\n\tDRAFTABLE,\n\thasSet,\n\tObjectish,\n\tDrafted,\n\tAnyObject,\n\tAnyMap,\n\tAnySet,\n\tImmerState,\n\thasMap,\n\tArchtype,\n\tdie\n} from \"../internal\"\n\n/** Returns true if the given value is an Immer draft */\n/*#__PURE__*/\nexport function isDraft(value: any): boolean {\n\treturn !!value && !!value[DRAFT_STATE]\n}\n\n/** Returns true if the given value can be drafted by Immer */\n/*#__PURE__*/\nexport function isDraftable(value: any): boolean {\n\tif (!value) return false\n\treturn (\n\t\tisPlainObject(value) ||\n\t\tArray.isArray(value) ||\n\t\t!!value[DRAFTABLE] ||\n\t\t!!value.constructor?.[DRAFTABLE] ||\n\t\tisMap(value) ||\n\t\tisSet(value)\n\t)\n}\n\nconst objectCtorString = Object.prototype.constructor.toString()\n/*#__PURE__*/\nexport function isPlainObject(value: any): boolean {\n\tif (!value || typeof value !== \"object\") return false\n\tconst proto = Object.getPrototypeOf(value)\n\tif (proto === null) {\n\t\treturn true\n\t}\n\tconst Ctor =\n\t\tObject.hasOwnProperty.call(proto, \"constructor\") && proto.constructor\n\n\tif (Ctor === Object) return true\n\n\treturn (\n\t\ttypeof Ctor == \"function\" &&\n\t\tFunction.toString.call(Ctor) === objectCtorString\n\t)\n}\n\n/** Get the underlying object that is represented by the given draft */\n/*#__PURE__*/\nexport function original<T>(value: T): T | undefined\nexport function original(value: Drafted<any>): any {\n\tif (!isDraft(value)) die(23, value)\n\treturn value[DRAFT_STATE].base_\n}\n\n/*#__PURE__*/\nexport const ownKeys: (target: AnyObject) => PropertyKey[] =\n\ttypeof Reflect !== \"undefined\" && Reflect.ownKeys\n\t\t? Reflect.ownKeys\n\t\t: typeof Object.getOwnPropertySymbols !== \"undefined\"\n\t\t? obj =>\n\t\t\t\tObject.getOwnPropertyNames(obj).concat(\n\t\t\t\t\tObject.getOwnPropertySymbols(obj) as any\n\t\t\t\t)\n\t\t: /* istanbul ignore next */ Object.getOwnPropertyNames\n\nexport const getOwnPropertyDescriptors =\n\tObject.getOwnPropertyDescriptors ||\n\tfunction getOwnPropertyDescriptors(target: any) {\n\t\t// Polyfill needed for Hermes and IE, see https://github.com/facebook/hermes/issues/274\n\t\tconst res: any = {}\n\t\townKeys(target).forEach(key => {\n\t\t\tres[key] = Object.getOwnPropertyDescriptor(target, key)\n\t\t})\n\t\treturn res\n\t}\n\nexport function each<T extends Objectish>(\n\tobj: T,\n\titer: (key: string | number, value: any, source: T) => void,\n\tenumerableOnly?: boolean\n): void\nexport function each(obj: any, iter: any, enumerableOnly = false) {\n\tif (getArchtype(obj) === Archtype.Object) {\n\t\t;(enumerableOnly ? Object.keys : ownKeys)(obj).forEach(key => {\n\t\t\tif (!enumerableOnly || typeof key !== \"symbol\") iter(key, obj[key], obj)\n\t\t})\n\t} else {\n\t\tobj.forEach((entry: any, index: any) => iter(index, entry, obj))\n\t}\n}\n\n/*#__PURE__*/\nexport function getArchtype(thing: any): Archtype {\n\t/* istanbul ignore next */\n\tconst state: undefined | ImmerState = thing[DRAFT_STATE]\n\treturn state\n\t\t? state.type_ > 3\n\t\t\t? state.type_ - 4 // cause Object and Array map back from 4 and 5\n\t\t\t: (state.type_ as any) // others are the same\n\t\t: Array.isArray(thing)\n\t\t? Archtype.Array\n\t\t: isMap(thing)\n\t\t? Archtype.Map\n\t\t: isSet(thing)\n\t\t? Archtype.Set\n\t\t: Archtype.Object\n}\n\n/*#__PURE__*/\nexport function has(thing: any, prop: PropertyKey): boolean {\n\treturn getArchtype(thing) === Archtype.Map\n\t\t? thing.has(prop)\n\t\t: Object.prototype.hasOwnProperty.call(thing, prop)\n}\n\n/*#__PURE__*/\nexport function get(thing: AnyMap | AnyObject, prop: PropertyKey): any {\n\t// @ts-ignore\n\treturn getArchtype(thing) === Archtype.Map ? thing.get(prop) : thing[prop]\n}\n\n/*#__PURE__*/\nexport function set(thing: any, propOrOldValue: PropertyKey, value: any) {\n\tconst t = getArchtype(thing)\n\tif (t === Archtype.Map) thing.set(propOrOldValue, value)\n\telse if (t === Archtype.Set) {\n\t\tthing.add(value)\n\t} else thing[propOrOldValue] = value\n}\n\n/*#__PURE__*/\nexport function is(x: any, y: any): boolean {\n\t// From: https://github.com/facebook/fbjs/blob/c69904a511b900266935168223063dd8772dfc40/packages/fbjs/src/core/shallowEqual.js\n\tif (x === y) {\n\t\treturn x !== 0 || 1 / x === 1 / y\n\t} else {\n\t\treturn x !== x && y !== y\n\t}\n}\n\n/*#__PURE__*/\nexport function isMap(target: any): target is AnyMap {\n\treturn hasMap && target instanceof Map\n}\n\n/*#__PURE__*/\nexport function isSet(target: any): target is AnySet {\n\treturn hasSet && target instanceof Set\n}\n/*#__PURE__*/\nexport function latest(state: ImmerState): any {\n\treturn state.copy_ || state.base_\n}\n\n/*#__PURE__*/\nexport function shallowCopy(base: any) {\n\tif (Array.isArray(base)) return Array.prototype.slice.call(base)\n\tconst descriptors = getOwnPropertyDescriptors(base)\n\tdelete descriptors[DRAFT_STATE as any]\n\tlet keys = ownKeys(descriptors)\n\tfor (let i = 0; i < keys.length; i++) {\n\t\tconst key: any = keys[i]\n\t\tconst desc = descriptors[key]\n\t\tif (desc.writable === false) {\n\t\t\tdesc.writable = true\n\t\t\tdesc.configurable = true\n\t\t}\n\t\t// like object.assign, we will read any _own_, get/set accessors. This helps in dealing\n\t\t// with libraries that trap values, like mobx or vue\n\t\t// unlike object.assign, non-enumerables will be copied as well\n\t\tif (desc.get || desc.set)\n\t\t\tdescriptors[key] = {\n\t\t\t\tconfigurable: true,\n\t\t\t\twritable: true, // could live with !!desc.set as well here...\n\t\t\t\tenumerable: desc.enumerable,\n\t\t\t\tvalue: base[key]\n\t\t\t}\n\t}\n\treturn Object.create(Object.getPrototypeOf(base), descriptors)\n}\n\n/**\n * Freezes draftable objects. Returns the original object.\n * By default freezes shallowly, but if the second argument is `true` it will freeze recursively.\n *\n * @param obj\n * @param deep\n */\nexport function freeze<T>(obj: T, deep?: boolean): T\nexport function freeze<T>(obj: any, deep: boolean = false): T {\n\tif (isFrozen(obj) || isDraft(obj) || !isDraftable(obj)) return obj\n\tif (getArchtype(obj) > 1 /* Map or Set */) {\n\t\tobj.set = obj.add = obj.clear = obj.delete = dontMutateFrozenCollections as any\n\t}\n\tObject.freeze(obj)\n\tif (deep) each(obj, (key, value) => freeze(value, true), true)\n\treturn obj\n}\n\nfunction dontMutateFrozenCollections() {\n\tdie(2)\n}\n\nexport function isFrozen(obj: any): boolean {\n\tif (obj == null || typeof obj !== \"object\") return true\n\t// See #600, IE dies on non-objects in Object.isFrozen\n\treturn Object.isFrozen(obj)\n}\n", "import {\n\tImmerState,\n\tPatch,\n\tImmerScope,\n\tDrafted,\n\tAnyObject,\n\tImmerBaseState,\n\tAnyMap,\n\tAnySet,\n\tProxyType,\n\tdie\n} from \"../internal\"\n\n/** Plugin utilities */\nconst plugins: {\n\tPatches?: {\n\t\tgeneratePatches_(\n\t\t\tstate: ImmerState,\n\t\t\tbasePath: PatchPath,\n\t\t\tpatches: Patch[],\n\t\t\tinversePatches: Patch[]\n\t\t): void\n\t\tgenerateReplacementPatches_(\n\t\t\tbase: any,\n\t\t\treplacement: any,\n\t\t\tpatches: Patch[],\n\t\t\tinversePatches: Patch[]\n\t\t): void\n\t\tapplyPatches_<T>(draft: T, patches: Patch[]): T\n\t}\n\tES5?: {\n\t\twillFinalizeES5_(scope: ImmerScope, result: any, isReplaced: boolean): void\n\t\tcreateES5Proxy_<T>(\n\t\t\tbase: T,\n\t\t\tparent?: ImmerState\n\t\t): Drafted<T, ES5ObjectState | ES5ArrayState>\n\t\thasChanges_(state: ES5ArrayState | ES5ObjectState): boolean\n\t}\n\tMapSet?: {\n\t\tproxyMap_<T extends AnyMap>(target: T, parent?: ImmerState): T\n\t\tproxySet_<T extends AnySet>(target: T, parent?: ImmerState): T\n\t}\n} = {}\n\ntype Plugins = typeof plugins\n\nexport function getPlugin<K extends keyof Plugins>(\n\tpluginKey: K\n): Exclude<Plugins[K], undefined> {\n\tconst plugin = plugins[pluginKey]\n\tif (!plugin) {\n\t\tdie(18, pluginKey)\n\t}\n\t// @ts-ignore\n\treturn plugin\n}\n\nexport function loadPlugin<K extends keyof Plugins>(\n\tpluginKey: K,\n\timplementation: Plugins[K]\n): void {\n\tif (!plugins[pluginKey]) plugins[pluginKey] = implementation\n}\n\n/** ES5 Plugin */\n\ninterface ES5BaseState extends ImmerBaseState {\n\tassigned_: {[key: string]: any}\n\tparent_?: ImmerState\n\trevoked_: boolean\n}\n\nexport interface ES5ObjectState extends ES5BaseState {\n\ttype_: ProxyType.ES5Object\n\tdraft_: Drafted<AnyObject, ES5ObjectState>\n\tbase_: AnyObject\n\tcopy_: AnyObject | null\n}\n\nexport interface ES5ArrayState extends ES5BaseState {\n\ttype_: ProxyType.ES5Array\n\tdraft_: Drafted<AnyObject, ES5ArrayState>\n\tbase_: any\n\tcopy_: any\n}\n\n/** Map / Set plugin */\n\nexport interface MapState extends ImmerBaseState {\n\ttype_: ProxyType.Map\n\tcopy_: AnyMap | undefined\n\tassigned_: Map<any, boolean> | undefined\n\tbase_: AnyMap\n\trevoked_: boolean\n\tdraft_: Drafted<AnyMap, MapState>\n}\n\nexport interface SetState extends ImmerBaseState {\n\ttype_: ProxyType.Set\n\tcopy_: AnySet | undefined\n\tbase_: AnySet\n\tdrafts_: Map<any, Drafted> // maps the original value to the draft value in the new set\n\trevoked_: boolean\n\tdraft_: Drafted<AnySet, SetState>\n}\n\n/** Patches plugin */\n\nexport type PatchPath = (string | number)[]\n", "import {\n\tPatch,\n\tPatchListener,\n\tDrafted,\n\tImmer,\n\tDRAFT_STATE,\n\tImmerState,\n\tProxyType,\n\tgetPlugin\n} from \"../internal\"\nimport {die} from \"../utils/errors\"\n\n/** Each scope represents a `produce` call. */\n\nexport interface ImmerScope {\n\tpatches_?: Patch[]\n\tinversePatches_?: Patch[]\n\tcanAutoFreeze_: boolean\n\tdrafts_: any[]\n\tparent_?: ImmerScope\n\tpatchListener_?: PatchListener\n\timmer_: Immer\n\tunfinalizedDrafts_: number\n}\n\nlet currentScope: ImmerScope | undefined\n\nexport function getCurrentScope() {\n\tif (__DEV__ && !currentScope) die(0)\n\treturn currentScope!\n}\n\nfunction createScope(\n\tparent_: ImmerScope | undefined,\n\timmer_: Immer\n): ImmerScope {\n\treturn {\n\t\tdrafts_: [],\n\t\tparent_,\n\t\timmer_,\n\t\t// Whenever the modified draft contains a draft from another scope, we\n\t\t// need to prevent auto-freezing so the unowned draft can be finalized.\n\t\tcanAutoFreeze_: true,\n\t\tunfinalizedDrafts_: 0\n\t}\n}\n\nexport function usePatchesInScope(\n\tscope: ImmerScope,\n\tpatchListener?: PatchListener\n) {\n\tif (patchListener) {\n\t\tgetPlugin(\"Patches\") // assert we have the plugin\n\t\tscope.patches_ = []\n\t\tscope.inversePatches_ = []\n\t\tscope.patchListener_ = patchListener\n\t}\n}\n\nexport function revokeScope(scope: ImmerScope) {\n\tleaveScope(scope)\n\tscope.drafts_.forEach(revokeDraft)\n\t// @ts-ignore\n\tscope.drafts_ = null\n}\n\nexport function leaveScope(scope: ImmerScope) {\n\tif (scope === currentScope) {\n\t\tcurrentScope = scope.parent_\n\t}\n}\n\nexport function enterScope(immer: Immer) {\n\treturn (currentScope = createScope(currentScope, immer))\n}\n\nfunction revokeDraft(draft: Drafted) {\n\tconst state: ImmerState = draft[DRAFT_STATE]\n\tif (\n\t\tstate.type_ === ProxyType.ProxyObject ||\n\t\tstate.type_ === ProxyType.ProxyArray\n\t)\n\t\tstate.revoke_()\n\telse state.revoked_ = true\n}\n", "import {\n\tImmerScope,\n\tDRAFT_STATE,\n\tisDraftable,\n\tNOTHING,\n\tPatchPath,\n\teach,\n\thas,\n\tfreeze,\n\tImmerState,\n\tisDraft,\n\tSetState,\n\tset,\n\tProxyType,\n\tgetPlugin,\n\tdie,\n\trevokeScope,\n\tisFrozen,\n\tshallowCopy\n} from \"../internal\"\n\nexport function processResult(result: any, scope: ImmerScope) {\n\tscope.unfinalizedDrafts_ = scope.drafts_.length\n\tconst baseDraft = scope.drafts_![0]\n\tconst isReplaced = result !== undefined && result !== baseDraft\n\tif (!scope.immer_.useProxies_)\n\t\tgetPlugin(\"ES5\").willFinalizeES5_(scope, result, isReplaced)\n\tif (isReplaced) {\n\t\tif (baseDraft[DRAFT_STATE].modified_) {\n\t\t\trevokeScope(scope)\n\t\t\tdie(4)\n\t\t}\n\t\tif (isDraftable(result)) {\n\t\t\t// Finalize the result in case it contains (or is) a subset of the draft.\n\t\t\tresult = finalize(scope, result)\n\t\t\tif (!scope.parent_) maybeFreeze(scope, result)\n\t\t}\n\t\tif (scope.patches_) {\n\t\t\tgetPlugin(\"Patches\").generateReplacementPatches_(\n\t\t\t\tbaseDraft[DRAFT_STATE].base_,\n\t\t\t\tresult,\n\t\t\t\tscope.patches_,\n\t\t\t\tscope.inversePatches_!\n\t\t\t)\n\t\t}\n\t} else {\n\t\t// Finalize the base draft.\n\t\tresult = finalize(scope, baseDraft, [])\n\t}\n\trevokeScope(scope)\n\tif (scope.patches_) {\n\t\tscope.patchListener_!(scope.patches_, scope.inversePatches_!)\n\t}\n\treturn result !== NOTHING ? result : undefined\n}\n\nfunction finalize(rootScope: ImmerScope, value: any, path?: PatchPath) {\n\t// Don't recurse in tho recursive data structures\n\tif (isFrozen(value)) return value\n\n\tconst state: ImmerState = value[DRAFT_STATE]\n\t// A plain object, might need freezing, might contain drafts\n\tif (!state) {\n\t\teach(\n\t\t\tvalue,\n\t\t\t(key, childValue) =>\n\t\t\t\tfinalizeProperty(rootScope, state, value, key, childValue, path),\n\t\t\ttrue // See #590, don't recurse into non-enumerable of non drafted objects\n\t\t)\n\t\treturn value\n\t}\n\t// Never finalize drafts owned by another scope.\n\tif (state.scope_ !== rootScope) return value\n\t// Unmodified draft, return the (frozen) original\n\tif (!state.modified_) {\n\t\tmaybeFreeze(rootScope, state.base_, true)\n\t\treturn state.base_\n\t}\n\t// Not finalized yet, let's do that now\n\tif (!state.finalized_) {\n\t\tstate.finalized_ = true\n\t\tstate.scope_.unfinalizedDrafts_--\n\t\tconst result =\n\t\t\t// For ES5, create a good copy from the draft first, with added keys and without deleted keys.\n\t\t\tstate.type_ === ProxyType.ES5Object || state.type_ === ProxyType.ES5Array\n\t\t\t\t? (state.copy_ = shallowCopy(state.draft_))\n\t\t\t\t: state.copy_\n\t\t// Finalize all children of the copy\n\t\t// For sets we clone before iterating, otherwise we can get in endless loop due to modifying during iteration, see #628\n\t\t// To preserve insertion order in all cases we then clear the set\n\t\t// And we let finalizeProperty know it needs to re-add non-draft children back to the target\n\t\tlet resultEach = result\n\t\tlet isSet = false\n\t\tif (state.type_ === ProxyType.Set) {\n\t\t\tresultEach = new Set(result)\n\t\t\tresult.clear()\n\t\t\tisSet = true\n\t\t}\n\t\teach(resultEach, (key, childValue) =>\n\t\t\tfinalizeProperty(rootScope, state, result, key, childValue, path, isSet)\n\t\t)\n\t\t// everything inside is frozen, we can freeze here\n\t\tmaybeFreeze(rootScope, result, false)\n\t\t// first time finalizing, let's create those patches\n\t\tif (path && rootScope.patches_) {\n\t\t\tgetPlugin(\"Patches\").generatePatches_(\n\t\t\t\tstate,\n\t\t\t\tpath,\n\t\t\t\trootScope.patches_,\n\t\t\t\trootScope.inversePatches_!\n\t\t\t)\n\t\t}\n\t}\n\treturn state.copy_\n}\n\nfunction finalizeProperty(\n\trootScope: ImmerScope,\n\tparentState: undefined | ImmerState,\n\ttargetObject: any,\n\tprop: string | number,\n\tchildValue: any,\n\trootPath?: PatchPath,\n\ttargetIsSet?: boolean\n) {\n\tif (__DEV__ && childValue === targetObject) die(5)\n\tif (isDraft(childValue)) {\n\t\tconst path =\n\t\t\trootPath &&\n\t\t\tparentState &&\n\t\t\tparentState!.type_ !== ProxyType.Set && // Set objects are atomic since they have no keys.\n\t\t\t!has((parentState as Exclude<ImmerState, SetState>).assigned_!, prop) // Skip deep patches for assigned keys.\n\t\t\t\t? rootPath!.concat(prop)\n\t\t\t\t: undefined\n\t\t// Drafts owned by `scope` are finalized here.\n\t\tconst res = finalize(rootScope, childValue, path)\n\t\tset(targetObject, prop, res)\n\t\t// Drafts from another scope must prevented to be frozen\n\t\t// if we got a draft back from finalize, we're in a nested produce and shouldn't freeze\n\t\tif (isDraft(res)) {\n\t\t\trootScope.canAutoFreeze_ = false\n\t\t} else return\n\t} else if (targetIsSet) {\n\t\ttargetObject.add(childValue)\n\t}\n\t// Search new objects for unfinalized drafts. Frozen objects should never contain drafts.\n\tif (isDraftable(childValue) && !isFrozen(childValue)) {\n\t\tif (!rootScope.immer_.autoFreeze_ && rootScope.unfinalizedDrafts_ < 1) {\n\t\t\t// optimization: if an object is not a draft, and we don't have to\n\t\t\t// deepfreeze everything, and we are sure that no drafts are left in the remaining object\n\t\t\t// cause we saw and finalized all drafts already; we can stop visiting the rest of the tree.\n\t\t\t// This benefits especially adding large data tree's without further processing.\n\t\t\t// See add-data.js perf test\n\t\t\treturn\n\t\t}\n\t\tfinalize(rootScope, childValue)\n\t\t// immer deep freezes plain objects, so if there is no parent state, we freeze as well\n\t\tif (!parentState || !parentState.scope_.parent_)\n\t\t\tmaybeFreeze(rootScope, childValue)\n\t}\n}\n\nfunction maybeFreeze(scope: ImmerScope, value: any, deep = false) {\n\t// we never freeze for a non-root scope; as it would prevent pruning for drafts inside wrapping objects\n\tif (!scope.parent_ && scope.immer_.autoFreeze_ && scope.canAutoFreeze_) {\n\t\tfreeze(value, deep)\n\t}\n}\n", "import {\n\teach,\n\thas,\n\tis,\n\tisDraftable,\n\tshallowCopy,\n\tlatest,\n\tImmerBaseState,\n\tImmerState,\n\tDrafted,\n\tAnyObject,\n\tAnyArray,\n\tObjectish,\n\tgetCurrentScope,\n\tDRAFT_STATE,\n\tdie,\n\tcreateProxy,\n\tProxyType\n} from \"../internal\"\n\ninterface ProxyBaseState extends ImmerBaseState {\n\tassigned_: {\n\t\t[property: string]: boolean\n\t}\n\tparent_?: ImmerState\n\trevoke_(): void\n}\n\nexport interface ProxyObjectState extends ProxyBaseState {\n\ttype_: ProxyType.ProxyObject\n\tbase_: any\n\tcopy_: any\n\tdraft_: Drafted<AnyObject, ProxyObjectState>\n}\n\nexport interface ProxyArrayState extends ProxyBaseState {\n\ttype_: ProxyType.ProxyArray\n\tbase_: AnyArray\n\tcopy_: AnyArray | null\n\tdraft_: Drafted<AnyArray, ProxyArrayState>\n}\n\ntype ProxyState = ProxyObjectState | ProxyArrayState\n\n/**\n * Returns a new draft of the `base` object.\n *\n * The second argument is the parent draft-state (used internally).\n */\nexport function createProxyProxy<T extends Objectish>(\n\tbase: T,\n\tparent?: ImmerState\n): Drafted<T, ProxyState> {\n\tconst isArray = Array.isArray(base)\n\tconst state: ProxyState = {\n\t\ttype_: isArray ? ProxyType.ProxyArray : (ProxyType.ProxyObject as any),\n\t\t// Track which produce call this is associated with.\n\t\tscope_: parent ? parent.scope_ : getCurrentScope()!,\n\t\t// True for both shallow and deep changes.\n\t\tmodified_: false,\n\t\t// Used during finalization.\n\t\tfinalized_: false,\n\t\t// Track which properties have been assigned (true) or deleted (false).\n\t\tassigned_: {},\n\t\t// The parent draft state.\n\t\tparent_: parent,\n\t\t// The base state.\n\t\tbase_: base,\n\t\t// The base proxy.\n\t\tdraft_: null as any, // set below\n\t\t// The base copy with any updated values.\n\t\tcopy_: null,\n\t\t// Called by the `produce` function.\n\t\trevoke_: null as any,\n\t\tisManual_: false\n\t}\n\n\t// the traps must target something, a bit like the 'real' base.\n\t// but also, we need to be able to determine from the target what the relevant state is\n\t// (to avoid creating traps per instance to capture the state in closure,\n\t// and to avoid creating weird hidden properties as well)\n\t// So the trick is to use 'state' as the actual 'target'! (and make sure we intercept everything)\n\t// Note that in the case of an array, we put the state in an array to have better Reflect defaults ootb\n\tlet target: T = state as any\n\tlet traps: ProxyHandler<object | Array<any>> = objectTraps\n\tif (isArray) {\n\t\ttarget = [state] as any\n\t\ttraps = arrayTraps\n\t}\n\n\tconst {revoke, proxy} = Proxy.revocable(target, traps)\n\tstate.draft_ = proxy as any\n\tstate.revoke_ = revoke\n\treturn proxy as any\n}\n\n/**\n * Object drafts\n */\nexport const objectTraps: ProxyHandler<ProxyState> = {\n\tget(state, prop) {\n\t\tif (prop === DRAFT_STATE) return state\n\n\t\tconst source = latest(state)\n\t\tif (!has(source, prop)) {\n\t\t\t// non-existing or non-own property...\n\t\t\treturn readPropFromProto(state, source, prop)\n\t\t}\n\t\tconst value = source[prop]\n\t\tif (state.finalized_ || !isDraftable(value)) {\n\t\t\treturn value\n\t\t}\n\t\t// Check for existing draft in modified state.\n\t\t// Assigned values are never drafted. This catches any drafts we created, too.\n\t\tif (value === peek(state.base_, prop)) {\n\t\t\tprepareCopy(state)\n\t\t\treturn (state.copy_![prop as any] = createProxy(\n\t\t\t\tstate.scope_.immer_,\n\t\t\t\tvalue,\n\t\t\t\tstate\n\t\t\t))\n\t\t}\n\t\treturn value\n\t},\n\thas(state, prop) {\n\t\treturn prop in latest(state)\n\t},\n\townKeys(state) {\n\t\treturn Reflect.ownKeys(latest(state))\n\t},\n\tset(\n\t\tstate: ProxyObjectState,\n\t\tprop: string /* strictly not, but helps TS */,\n\t\tvalue\n\t) {\n\t\tconst desc = getDescriptorFromProto(latest(state), prop)\n\t\tif (desc?.set) {\n\t\t\t// special case: if this write is captured by a setter, we have\n\t\t\t// to trigger it with the correct context\n\t\t\tdesc.set.call(state.draft_, value)\n\t\t\treturn true\n\t\t}\n\t\tif (!state.modified_) {\n\t\t\t// the last check is because we need to be able to distinguish setting a non-existing to undefined (which is a change)\n\t\t\t// from setting an existing property with value undefined to undefined (which is not a change)\n\t\t\tconst current = peek(latest(state), prop)\n\t\t\t// special case, if we assigning the original value to a draft, we can ignore the assignment\n\t\t\tconst currentState: ProxyObjectState = current?.[DRAFT_STATE]\n\t\t\tif (currentState && currentState.base_ === value) {\n\t\t\t\tstate.copy_![prop] = value\n\t\t\t\tstate.assigned_[prop] = false\n\t\t\t\treturn true\n\t\t\t}\n\t\t\tif (is(value, current) && (value !== undefined || has(state.base_, prop)))\n\t\t\t\treturn true\n\t\t\tprepareCopy(state)\n\t\t\tmarkChanged(state)\n\t\t}\n\n\t\tif (\n\t\t\t(state.copy_![prop] === value &&\n\t\t\t\t// special case: handle new props with value 'undefined'\n\t\t\t\t(value !== undefined || prop in state.copy_)) ||\n\t\t\t// special case: NaN\n\t\t\t(Number.isNaN(value) && Number.isNaN(state.copy_![prop]))\n\t\t)\n\t\t\treturn true\n\n\t\t// @ts-ignore\n\t\tstate.copy_![prop] = value\n\t\tstate.assigned_[prop] = true\n\t\treturn true\n\t},\n\tdeleteProperty(state, prop: string) {\n\t\t// The `undefined` check is a fast path for pre-existing keys.\n\t\tif (peek(state.base_, prop) !== undefined || prop in state.base_) {\n\t\t\tstate.assigned_[prop] = false\n\t\t\tprepareCopy(state)\n\t\t\tmarkChanged(state)\n\t\t} else {\n\t\t\t// if an originally not assigned property was deleted\n\t\t\tdelete state.assigned_[prop]\n\t\t}\n\t\t// @ts-ignore\n\t\tif (state.copy_) delete state.copy_[prop]\n\t\treturn true\n\t},\n\t// Note: We never coerce `desc.value` into an Immer draft, because we can't make\n\t// the same guarantee in ES5 mode.\n\tgetOwnPropertyDescriptor(state, prop) {\n\t\tconst owner = latest(state)\n\t\tconst desc = Reflect.getOwnPropertyDescriptor(owner, prop)\n\t\tif (!desc) return desc\n\t\treturn {\n\t\t\twritable: true,\n\t\t\tconfigurable: state.type_ !== ProxyType.ProxyArray || prop !== \"length\",\n\t\t\tenumerable: desc.enumerable,\n\t\t\tvalue: owner[prop]\n\t\t}\n\t},\n\tdefineProperty() {\n\t\tdie(11)\n\t},\n\tgetPrototypeOf(state) {\n\t\treturn Object.getPrototypeOf(state.base_)\n\t},\n\tsetPrototypeOf() {\n\t\tdie(12)\n\t}\n}\n\n/**\n * Array drafts\n */\n\nconst arrayTraps: ProxyHandler<[ProxyArrayState]> = {}\neach(objectTraps, (key, fn) => {\n\t// @ts-ignore\n\tarrayTraps[key] = function() {\n\t\targuments[0] = arguments[0][0]\n\t\treturn fn.apply(this, arguments)\n\t}\n})\narrayTraps.deleteProperty = function(state, prop) {\n\tif (__DEV__ && isNaN(parseInt(prop as any))) die(13)\n\t// @ts-ignore\n\treturn arrayTraps.set!.call(this, state, prop, undefined)\n}\narrayTraps.set = function(state, prop, value) {\n\tif (__DEV__ && prop !== \"length\" && isNaN(parseInt(prop as any))) die(14)\n\treturn objectTraps.set!.call(this, state[0], prop, value, state[0])\n}\n\n// Access a property without creating an Immer draft.\nfunction peek(draft: Drafted, prop: PropertyKey) {\n\tconst state = draft[DRAFT_STATE]\n\tconst source = state ? latest(state) : draft\n\treturn source[prop]\n}\n\nfunction readPropFromProto(state: ImmerState, source: any, prop: PropertyKey) {\n\tconst desc = getDescriptorFromProto(source, prop)\n\treturn desc\n\t\t? `value` in desc\n\t\t\t? desc.value\n\t\t\t: // This is a very special case, if the prop is a getter defined by the\n\t\t\t  // prototype, we should invoke it with the draft as context!\n\t\t\t  desc.get?.call(state.draft_)\n\t\t: undefined\n}\n\nfunction getDescriptorFromProto(\n\tsource: any,\n\tprop: PropertyKey\n): PropertyDescriptor | undefined {\n\t// 'in' checks proto!\n\tif (!(prop in source)) return undefined\n\tlet proto = Object.getPrototypeOf(source)\n\twhile (proto) {\n\t\tconst desc = Object.getOwnPropertyDescriptor(proto, prop)\n\t\tif (desc) return desc\n\t\tproto = Object.getPrototypeOf(proto)\n\t}\n\treturn undefined\n}\n\nexport function markChanged(state: ImmerState) {\n\tif (!state.modified_) {\n\t\tstate.modified_ = true\n\t\tif (state.parent_) {\n\t\t\tmarkChanged(state.parent_)\n\t\t}\n\t}\n}\n\nexport function prepareCopy(state: {base_: any; copy_: any}) {\n\tif (!state.copy_) {\n\t\tstate.copy_ = shallowCopy(state.base_)\n\t}\n}\n", "import {\n\tIProduceWithPatches,\n\tIProduce,\n\tImmerState,\n\tDrafted,\n\tisDraftable,\n\tprocessResult,\n\tPatch,\n\tObjectish,\n\tDRAFT_STATE,\n\tDraft,\n\tPatchListener,\n\tisDraft,\n\tisMap,\n\tisSet,\n\tcreateProxyProxy,\n\tgetPlugin,\n\tdie,\n\thasProxies,\n\tenterScope,\n\trevokeScope,\n\tleaveScope,\n\tusePatchesInScope,\n\tgetCurrentScope,\n\tNOTHING,\n\tfreeze,\n\tcurrent\n} from \"../internal\"\n\ninterface ProducersFns {\n\tproduce: IProduce\n\tproduceWithPatches: IProduceWithPatches\n}\n\nexport class Immer implements ProducersFns {\n\tuseProxies_: boolean = hasProxies\n\n\tautoFreeze_: boolean = true\n\n\tconstructor(config?: {useProxies?: boolean; autoFreeze?: boolean}) {\n\t\tif (typeof config?.useProxies === \"boolean\")\n\t\t\tthis.setUseProxies(config!.useProxies)\n\t\tif (typeof config?.autoFreeze === \"boolean\")\n\t\t\tthis.setAutoFreeze(config!.autoFreeze)\n\t}\n\n\t/**\n\t * The `produce` function takes a value and a \"recipe function\" (whose\n\t * return value often depends on the base state). The recipe function is\n\t * free to mutate its first argument however it wants. All mutations are\n\t * only ever applied to a __copy__ of the base state.\n\t *\n\t * Pass only a function to create a \"curried producer\" which relieves you\n\t * from passing the recipe function every time.\n\t *\n\t * Only plain objects and arrays are made mutable. All other objects are\n\t * considered uncopyable.\n\t *\n\t * Note: This function is __bound__ to its `Immer` instance.\n\t *\n\t * @param {any} base - the initial state\n\t * @param {Function} recipe - function that receives a proxy of the base state as first argument and which can be freely modified\n\t * @param {Function} patchListener - optional function that will be called with all the patches produced here\n\t * @returns {any} a new state, or the initial state if nothing was modified\n\t */\n\tproduce: IProduce = (base: any, recipe?: any, patchListener?: any) => {\n\t\t// curried invocation\n\t\tif (typeof base === \"function\" && typeof recipe !== \"function\") {\n\t\t\tconst defaultBase = recipe\n\t\t\trecipe = base\n\n\t\t\tconst self = this\n\t\t\treturn function curriedProduce(\n\t\t\t\tthis: any,\n\t\t\t\tbase = defaultBase,\n\t\t\t\t...args: any[]\n\t\t\t) {\n\t\t\t\treturn self.produce(base, (draft: Drafted) => recipe.call(this, draft, ...args)) // prettier-ignore\n\t\t\t}\n\t\t}\n\n\t\tif (typeof recipe !== \"function\") die(6)\n\t\tif (patchListener !== undefined && typeof patchListener !== \"function\")\n\t\t\tdie(7)\n\n\t\tlet result\n\n\t\t// Only plain objects, arrays, and \"immerable classes\" are drafted.\n\t\tif (isDraftable(base)) {\n\t\t\tconst scope = enterScope(this)\n\t\t\tconst proxy = createProxy(this, base, undefined)\n\t\t\tlet hasError = true\n\t\t\ttry {\n\t\t\t\tresult = recipe(proxy)\n\t\t\t\thasError = false\n\t\t\t} finally {\n\t\t\t\t// finally instead of catch + rethrow better preserves original stack\n\t\t\t\tif (hasError) revokeScope(scope)\n\t\t\t\telse leaveScope(scope)\n\t\t\t}\n\t\t\tif (typeof Promise !== \"undefined\" && result instanceof Promise) {\n\t\t\t\treturn result.then(\n\t\t\t\t\tresult => {\n\t\t\t\t\t\tusePatchesInScope(scope, patchListener)\n\t\t\t\t\t\treturn processResult(result, scope)\n\t\t\t\t\t},\n\t\t\t\t\terror => {\n\t\t\t\t\t\trevokeScope(scope)\n\t\t\t\t\t\tthrow error\n\t\t\t\t\t}\n\t\t\t\t)\n\t\t\t}\n\t\t\tusePatchesInScope(scope, patchListener)\n\t\t\treturn processResult(result, scope)\n\t\t} else if (!base || typeof base !== \"object\") {\n\t\t\tresult = recipe(base)\n\t\t\tif (result === undefined) result = base\n\t\t\tif (result === NOTHING) result = undefined\n\t\t\tif (this.autoFreeze_) freeze(result, true)\n\t\t\tif (patchListener) {\n\t\t\t\tconst p: Patch[] = []\n\t\t\t\tconst ip: Patch[] = []\n\t\t\t\tgetPlugin(\"Patches\").generateReplacementPatches_(base, result, p, ip)\n\t\t\t\tpatchListener(p, ip)\n\t\t\t}\n\t\t\treturn result\n\t\t} else die(21, base)\n\t}\n\n\tproduceWithPatches: IProduceWithPatches = (base: any, recipe?: any): any => {\n\t\t// curried invocation\n\t\tif (typeof base === \"function\") {\n\t\t\treturn (state: any, ...args: any[]) =>\n\t\t\t\tthis.produceWithPatches(state, (draft: any) => base(draft, ...args))\n\t\t}\n\n\t\tlet patches: Patch[], inversePatches: Patch[]\n\t\tconst result = this.produce(base, recipe, (p: Patch[], ip: Patch[]) => {\n\t\t\tpatches = p\n\t\t\tinversePatches = ip\n\t\t})\n\n\t\tif (typeof Promise !== \"undefined\" && result instanceof Promise) {\n\t\t\treturn result.then(nextState => [nextState, patches!, inversePatches!])\n\t\t}\n\t\treturn [result, patches!, inversePatches!]\n\t}\n\n\tcreateDraft<T extends Objectish>(base: T): Draft<T> {\n\t\tif (!isDraftable(base)) die(8)\n\t\tif (isDraft(base)) base = current(base)\n\t\tconst scope = enterScope(this)\n\t\tconst proxy = createProxy(this, base, undefined)\n\t\tproxy[DRAFT_STATE].isManual_ = true\n\t\tleaveScope(scope)\n\t\treturn proxy as any\n\t}\n\n\tfinishDraft<D extends Draft<any>>(\n\t\tdraft: D,\n\t\tpatchListener?: PatchListener\n\t): D extends Draft<infer T> ? T : never {\n\t\tconst state: ImmerState = draft && (draft as any)[DRAFT_STATE]\n\t\tif (__DEV__) {\n\t\t\tif (!state || !state.isManual_) die(9)\n\t\t\tif (state.finalized_) die(10)\n\t\t}\n\t\tconst {scope_: scope} = state\n\t\tusePatchesInScope(scope, patchListener)\n\t\treturn processResult(undefined, scope)\n\t}\n\n\t/**\n\t * Pass true to automatically freeze all copies created by Immer.\n\t *\n\t * By default, auto-freezing is enabled.\n\t */\n\tsetAutoFreeze(value: boolean) {\n\t\tthis.autoFreeze_ = value\n\t}\n\n\t/**\n\t * Pass true to use the ES2015 `Proxy` class when creating drafts, which is\n\t * always faster than using ES5 proxies.\n\t *\n\t * By default, feature detection is used, so calling this is rarely necessary.\n\t */\n\tsetUseProxies(value: boolean) {\n\t\tif (value && !hasProxies) {\n\t\t\tdie(20)\n\t\t}\n\t\tthis.useProxies_ = value\n\t}\n\n\tapplyPatches<T extends Objectish>(base: T, patches: Patch[]): T {\n\t\t// If a patch replaces the entire state, take that replacement as base\n\t\t// before applying patches\n\t\tlet i: number\n\t\tfor (i = patches.length - 1; i >= 0; i--) {\n\t\t\tconst patch = patches[i]\n\t\t\tif (patch.path.length === 0 && patch.op === \"replace\") {\n\t\t\t\tbase = patch.value\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t\t// If there was a patch that replaced the entire state, start from the\n\t\t// patch after that.\n\t\tif (i > -1) {\n\t\t\tpatches = patches.slice(i + 1)\n\t\t}\n\n\t\tconst applyPatchesImpl = getPlugin(\"Patches\").applyPatches_\n\t\tif (isDraft(base)) {\n\t\t\t// N.B: never hits if some patch a replacement, patches are never drafts\n\t\t\treturn applyPatchesImpl(base, patches)\n\t\t}\n\t\t// Otherwise, produce a copy of the base state.\n\t\treturn this.produce(base, (draft: Drafted) =>\n\t\t\tapplyPatchesImpl(draft, patches)\n\t\t)\n\t}\n}\n\nexport function createProxy<T extends Objectish>(\n\timmer: Immer,\n\tvalue: T,\n\tparent?: ImmerState\n): Drafted<T, ImmerState> {\n\t// precondition: createProxy should be guarded by isDraftable, so we know we can safely draft\n\tconst draft: Drafted = isMap(value)\n\t\t? getPlugin(\"MapSet\").proxyMap_(value, parent)\n\t\t: isSet(value)\n\t\t? getPlugin(\"MapSet\").proxySet_(value, parent)\n\t\t: immer.useProxies_\n\t\t? createProxyProxy(value, parent)\n\t\t: getPlugin(\"ES5\").createES5Proxy_(value, parent)\n\n\tconst scope = parent ? parent.scope_ : getCurrentScope()\n\tscope.drafts_.push(draft)\n\treturn draft\n}\n", "import {\n\tdie,\n\tisDraft,\n\tshallowCopy,\n\teach,\n\tDRAFT_STATE,\n\tget,\n\tset,\n\tImmerState,\n\tisDraftable,\n\tArchtype,\n\tgetArchtype,\n\tgetPlugin\n} from \"../internal\"\n\n/** Takes a snapshot of the current state of a draft and finalizes it (but without freezing). This is a great utility to print the current state during debugging (no Proxies in the way). The output of current can also be safely leaked outside the producer. */\nexport function current<T>(value: T): T\nexport function current(value: any): any {\n\tif (!isDraft(value)) die(22, value)\n\treturn currentImpl(value)\n}\n\nfunction currentImpl(value: any): any {\n\tif (!isDraftable(value)) return value\n\tconst state: ImmerState | undefined = value[DRAFT_STATE]\n\tlet copy: any\n\tconst archType = getArchtype(value)\n\tif (state) {\n\t\tif (\n\t\t\t!state.modified_ &&\n\t\t\t(state.type_ < 4 || !getPlugin(\"ES5\").hasChanges_(state as any))\n\t\t)\n\t\t\treturn state.base_\n\t\t// Optimization: avoid generating new drafts during copying\n\t\tstate.finalized_ = true\n\t\tcopy = copyHelper(value, archType)\n\t\tstate.finalized_ = false\n\t} else {\n\t\tcopy = copyHelper(value, archType)\n\t}\n\n\teach(copy, (key, childValue) => {\n\t\tif (state && get(state.base_, key) === childValue) return // no need to copy or search in something that didn't change\n\t\tset(copy, key, currentImpl(childValue))\n\t})\n\t// In the future, we might consider freezing here, based on the current settings\n\treturn archType === Archtype.Set ? new Set(copy) : copy\n}\n\nfunction copyHelper(value: any, archType: number): any {\n\t// creates a shallow copy, even if it is a map or set\n\tswitch (archType) {\n\t\tcase Archtype.Map:\n\t\t\treturn new Map(value)\n\t\tcase Archtype.Set:\n\t\t\t// Set will be cloned as array temporarily, so that we can replace individual items\n\t\t\treturn Array.from(value)\n\t}\n\treturn shallowCopy(value)\n}\n", "import {\n\tImmerState,\n\tDrafted,\n\tES5ArrayState,\n\tES5ObjectState,\n\teach,\n\thas,\n\tisDraft,\n\tlatest,\n\tDRAFT_STATE,\n\tis,\n\tloadPlugin,\n\tImmerScope,\n\tProxyType,\n\tgetCurrentScope,\n\tdie,\n\tmarkChanged,\n\tobjectTraps,\n\townKeys,\n\tgetOwnPropertyDescriptors\n} from \"../internal\"\n\ntype ES5State = ES5ArrayState | ES5ObjectState\n\nexport function enableES5() {\n\tfunction willFinalizeES5_(\n\t\tscope: ImmerScope,\n\t\tresult: any,\n\t\tisReplaced: boolean\n\t) {\n\t\tif (!isReplaced) {\n\t\t\tif (scope.patches_) {\n\t\t\t\tmarkChangesRecursively(scope.drafts_![0])\n\t\t\t}\n\t\t\t// This is faster when we don't care about which attributes changed.\n\t\t\tmarkChangesSweep(scope.drafts_)\n\t\t}\n\t\t// When a child draft is returned, look for changes.\n\t\telse if (\n\t\t\tisDraft(result) &&\n\t\t\t(result[DRAFT_STATE] as ES5State).scope_ === scope\n\t\t) {\n\t\t\tmarkChangesSweep(scope.drafts_)\n\t\t}\n\t}\n\n\tfunction createES5Draft(isArray: boolean, base: any) {\n\t\tif (isArray) {\n\t\t\tconst draft = new Array(base.length)\n\t\t\tfor (let i = 0; i < base.length; i++)\n\t\t\t\tObject.defineProperty(draft, \"\" + i, proxyProperty(i, true))\n\t\t\treturn draft\n\t\t} else {\n\t\t\tconst descriptors = getOwnPropertyDescriptors(base)\n\t\t\tdelete descriptors[DRAFT_STATE as any]\n\t\t\tconst keys = ownKeys(descriptors)\n\t\t\tfor (let i = 0; i < keys.length; i++) {\n\t\t\t\tconst key: any = keys[i]\n\t\t\t\tdescriptors[key] = proxyProperty(\n\t\t\t\t\tkey,\n\t\t\t\t\tisArray || !!descriptors[key].enumerable\n\t\t\t\t)\n\t\t\t}\n\t\t\treturn Object.create(Object.getPrototypeOf(base), descriptors)\n\t\t}\n\t}\n\n\tfunction createES5Proxy_<T>(\n\t\tbase: T,\n\t\tparent?: ImmerState\n\t): Drafted<T, ES5ObjectState | ES5ArrayState> {\n\t\tconst isArray = Array.isArray(base)\n\t\tconst draft = createES5Draft(isArray, base)\n\n\t\tconst state: ES5ObjectState | ES5ArrayState = {\n\t\t\ttype_: isArray ? ProxyType.ES5Array : (ProxyType.ES5Object as any),\n\t\t\tscope_: parent ? parent.scope_ : getCurrentScope(),\n\t\t\tmodified_: false,\n\t\t\tfinalized_: false,\n\t\t\tassigned_: {},\n\t\t\tparent_: parent,\n\t\t\t// base is the object we are drafting\n\t\t\tbase_: base,\n\t\t\t// draft is the draft object itself, that traps all reads and reads from either the base (if unmodified) or copy (if modified)\n\t\t\tdraft_: draft,\n\t\t\tcopy_: null,\n\t\t\trevoked_: false,\n\t\t\tisManual_: false\n\t\t}\n\n\t\tObject.defineProperty(draft, DRAFT_STATE, {\n\t\t\tvalue: state,\n\t\t\t// enumerable: false <- the default\n\t\t\twritable: true\n\t\t})\n\t\treturn draft\n\t}\n\n\t// property descriptors are recycled to make sure we don't create a get and set closure per property,\n\t// but share them all instead\n\tconst descriptors: {[prop: string]: PropertyDescriptor} = {}\n\n\tfunction proxyProperty(\n\t\tprop: string | number,\n\t\tenumerable: boolean\n\t): PropertyDescriptor {\n\t\tlet desc = descriptors[prop]\n\t\tif (desc) {\n\t\t\tdesc.enumerable = enumerable\n\t\t} else {\n\t\t\tdescriptors[prop] = desc = {\n\t\t\t\tconfigurable: true,\n\t\t\t\tenumerable,\n\t\t\t\tget(this: any) {\n\t\t\t\t\tconst state = this[DRAFT_STATE]\n\t\t\t\t\tif (__DEV__) assertUnrevoked(state)\n\t\t\t\t\t// @ts-ignore\n\t\t\t\t\treturn objectTraps.get(state, prop)\n\t\t\t\t},\n\t\t\t\tset(this: any, value) {\n\t\t\t\t\tconst state = this[DRAFT_STATE]\n\t\t\t\t\tif (__DEV__) assertUnrevoked(state)\n\t\t\t\t\t// @ts-ignore\n\t\t\t\t\tobjectTraps.set(state, prop, value)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn desc\n\t}\n\n\t// This looks expensive, but only proxies are visited, and only objects without known changes are scanned.\n\tfunction markChangesSweep(drafts: Drafted<any, ImmerState>[]) {\n\t\t// The natural order of drafts in the `scope` array is based on when they\n\t\t// were accessed. By processing drafts in reverse natural order, we have a\n\t\t// better chance of processing leaf nodes first. When a leaf node is known to\n\t\t// have changed, we can avoid any traversal of its ancestor nodes.\n\t\tfor (let i = drafts.length - 1; i >= 0; i--) {\n\t\t\tconst state: ES5State = drafts[i][DRAFT_STATE]\n\t\t\tif (!state.modified_) {\n\t\t\t\tswitch (state.type_) {\n\t\t\t\t\tcase ProxyType.ES5Array:\n\t\t\t\t\t\tif (hasArrayChanges(state)) markChanged(state)\n\t\t\t\t\t\tbreak\n\t\t\t\t\tcase ProxyType.ES5Object:\n\t\t\t\t\t\tif (hasObjectChanges(state)) markChanged(state)\n\t\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction markChangesRecursively(object: any) {\n\t\tif (!object || typeof object !== \"object\") return\n\t\tconst state: ES5State | undefined = object[DRAFT_STATE]\n\t\tif (!state) return\n\t\tconst {base_, draft_, assigned_, type_} = state\n\t\tif (type_ === ProxyType.ES5Object) {\n\t\t\t// Look for added keys.\n\t\t\t// probably there is a faster way to detect changes, as sweep + recurse seems to do some\n\t\t\t// unnecessary work.\n\t\t\t// also: probably we can store the information we detect here, to speed up tree finalization!\n\t\t\teach(draft_, key => {\n\t\t\t\tif ((key as any) === DRAFT_STATE) return\n\t\t\t\t// The `undefined` check is a fast path for pre-existing keys.\n\t\t\t\tif ((base_ as any)[key] === undefined && !has(base_, key)) {\n\t\t\t\t\tassigned_[key] = true\n\t\t\t\t\tmarkChanged(state)\n\t\t\t\t} else if (!assigned_[key]) {\n\t\t\t\t\t// Only untouched properties trigger recursion.\n\t\t\t\t\tmarkChangesRecursively(draft_[key])\n\t\t\t\t}\n\t\t\t})\n\t\t\t// Look for removed keys.\n\t\t\teach(base_, key => {\n\t\t\t\t// The `undefined` check is a fast path for pre-existing keys.\n\t\t\t\tif (draft_[key] === undefined && !has(draft_, key)) {\n\t\t\t\t\tassigned_[key] = false\n\t\t\t\t\tmarkChanged(state)\n\t\t\t\t}\n\t\t\t})\n\t\t} else if (type_ === ProxyType.ES5Array) {\n\t\t\tif (hasArrayChanges(state as ES5ArrayState)) {\n\t\t\t\tmarkChanged(state)\n\t\t\t\tassigned_.length = true\n\t\t\t}\n\n\t\t\tif (draft_.length < base_.length) {\n\t\t\t\tfor (let i = draft_.length; i < base_.length; i++) assigned_[i] = false\n\t\t\t} else {\n\t\t\t\tfor (let i = base_.length; i < draft_.length; i++) assigned_[i] = true\n\t\t\t}\n\n\t\t\t// Minimum count is enough, the other parts has been processed.\n\t\t\tconst min = Math.min(draft_.length, base_.length)\n\n\t\t\tfor (let i = 0; i < min; i++) {\n\t\t\t\t// Only untouched indices trigger recursion.\n\t\t\t\tif (!draft_.hasOwnProperty(i)) {\n\t\t\t\t\tassigned_[i] = true\n\t\t\t\t}\n\t\t\t\tif (assigned_[i] === undefined) markChangesRecursively(draft_[i])\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction hasObjectChanges(state: ES5ObjectState) {\n\t\tconst {base_, draft_} = state\n\n\t\t// Search for added keys and changed keys. Start at the back, because\n\t\t// non-numeric keys are ordered by time of definition on the object.\n\t\tconst keys = ownKeys(draft_)\n\t\tfor (let i = keys.length - 1; i >= 0; i--) {\n\t\t\tconst key: any = keys[i]\n\t\t\tif (key === DRAFT_STATE) continue\n\t\t\tconst baseValue = base_[key]\n\t\t\t// The `undefined` check is a fast path for pre-existing keys.\n\t\t\tif (baseValue === undefined && !has(base_, key)) {\n\t\t\t\treturn true\n\t\t\t}\n\t\t\t// Once a base key is deleted, future changes go undetected, because its\n\t\t\t// descriptor is erased. This branch detects any missed changes.\n\t\t\telse {\n\t\t\t\tconst value = draft_[key]\n\t\t\t\tconst state: ImmerState = value && value[DRAFT_STATE]\n\t\t\t\tif (state ? state.base_ !== baseValue : !is(value, baseValue)) {\n\t\t\t\t\treturn true\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// At this point, no keys were added or changed.\n\t\t// Compare key count to determine if keys were deleted.\n\t\tconst baseIsDraft = !!base_[DRAFT_STATE as any]\n\t\treturn keys.length !== ownKeys(base_).length + (baseIsDraft ? 0 : 1) // + 1 to correct for DRAFT_STATE\n\t}\n\n\tfunction hasArrayChanges(state: ES5ArrayState) {\n\t\tconst {draft_} = state\n\t\tif (draft_.length !== state.base_.length) return true\n\t\t// See #116\n\t\t// If we first shorten the length, our array interceptors will be removed.\n\t\t// If after that new items are added, result in the same original length,\n\t\t// those last items will have no intercepting property.\n\t\t// So if there is no own descriptor on the last position, we know that items were removed and added\n\t\t// N.B.: splice, unshift, etc only shift values around, but not prop descriptors, so we only have to check\n\t\t// the last one\n\t\t// last descriptor can be not a trap, if the array was extended\n\t\tconst descriptor = Object.getOwnPropertyDescriptor(\n\t\t\tdraft_,\n\t\t\tdraft_.length - 1\n\t\t)\n\t\t// descriptor can be null, but only for newly created sparse arrays, eg. new Array(10)\n\t\tif (descriptor && !descriptor.get) return true\n\t\t// if we miss a property, it has been deleted, so array probobaly changed\n\t\tfor (let i = 0; i < draft_.length; i++) {\n\t\t\tif (!draft_.hasOwnProperty(i)) return true\n\t\t}\n\t\t// For all other cases, we don't have to compare, as they would have been picked up by the index setters\n\t\treturn false\n\t}\n\n\tfunction hasChanges_(state: ES5State) {\n\t\treturn state.type_ === ProxyType.ES5Object\n\t\t\t? hasObjectChanges(state)\n\t\t\t: hasArrayChanges(state)\n\t}\n\n\tfunction assertUnrevoked(state: any /*ES5State | MapState | SetState*/) {\n\t\tif (state.revoked_) die(3, JSON.stringify(latest(state)))\n\t}\n\n\tloadPlugin(\"ES5\", {\n\t\tcreateES5Proxy_,\n\t\twillFinalizeES5_,\n\t\thasChanges_\n\t})\n}\n", "import {immerable} from \"../immer\"\nimport {\n\tImmerState,\n\tPatch,\n\tSetState,\n\tES5ArrayState,\n\tProxyArrayState,\n\tMapState,\n\tES5ObjectState,\n\tProxyObjectState,\n\tPatchPath,\n\tget,\n\teach,\n\thas,\n\tgetArchtype,\n\tisSet,\n\tisMap,\n\tloadPlugin,\n\tProxyType,\n\tArchtype,\n\tdie,\n\tisDraft,\n\tisDraftable,\n\tNOTHING\n} from \"../internal\"\n\nexport function enablePatches() {\n\tconst REPLACE = \"replace\"\n\tconst ADD = \"add\"\n\tconst REMOVE = \"remove\"\n\n\tfunction generatePatches_(\n\t\tstate: ImmerState,\n\t\tbasePath: PatchPath,\n\t\tpatches: Patch[],\n\t\tinversePatches: Patch[]\n\t): void {\n\t\tswitch (state.type_) {\n\t\t\tcase ProxyType.ProxyObject:\n\t\t\tcase ProxyType.ES5Object:\n\t\t\tcase ProxyType.Map:\n\t\t\t\treturn generatePatchesFromAssigned(\n\t\t\t\t\tstate,\n\t\t\t\t\tbasePath,\n\t\t\t\t\tpatches,\n\t\t\t\t\tinversePatches\n\t\t\t\t)\n\t\t\tcase ProxyType.ES5Array:\n\t\t\tcase ProxyType.ProxyArray:\n\t\t\t\treturn generateArrayPatches(state, basePath, patches, inversePatches)\n\t\t\tcase ProxyType.Set:\n\t\t\t\treturn generateSetPatches(\n\t\t\t\t\t(state as any) as SetState,\n\t\t\t\t\tbasePath,\n\t\t\t\t\tpatches,\n\t\t\t\t\tinversePatches\n\t\t\t\t)\n\t\t}\n\t}\n\n\tfunction generateArrayPatches(\n\t\tstate: ES5ArrayState | ProxyArrayState,\n\t\tbasePath: PatchPath,\n\t\tpatches: Patch[],\n\t\tinversePatches: Patch[]\n\t) {\n\t\tlet {base_, assigned_} = state\n\t\tlet copy_ = state.copy_!\n\n\t\t// Reduce complexity by ensuring `base` is never longer.\n\t\tif (copy_.length < base_.length) {\n\t\t\t// @ts-ignore\n\t\t\t;[base_, copy_] = [copy_, base_]\n\t\t\t;[patches, inversePatches] = [inversePatches, patches]\n\t\t}\n\n\t\t// Process replaced indices.\n\t\tfor (let i = 0; i < base_.length; i++) {\n\t\t\tif (assigned_[i] && copy_[i] !== base_[i]) {\n\t\t\t\tconst path = basePath.concat([i])\n\t\t\t\tpatches.push({\n\t\t\t\t\top: REPLACE,\n\t\t\t\t\tpath,\n\t\t\t\t\t// Need to maybe clone it, as it can in fact be the original value\n\t\t\t\t\t// due to the base/copy inversion at the start of this function\n\t\t\t\t\tvalue: clonePatchValueIfNeeded(copy_[i])\n\t\t\t\t})\n\t\t\t\tinversePatches.push({\n\t\t\t\t\top: REPLACE,\n\t\t\t\t\tpath,\n\t\t\t\t\tvalue: clonePatchValueIfNeeded(base_[i])\n\t\t\t\t})\n\t\t\t}\n\t\t}\n\n\t\t// Process added indices.\n\t\tfor (let i = base_.length; i < copy_.length; i++) {\n\t\t\tconst path = basePath.concat([i])\n\t\t\tpatches.push({\n\t\t\t\top: ADD,\n\t\t\t\tpath,\n\t\t\t\t// Need to maybe clone it, as it can in fact be the original value\n\t\t\t\t// due to the base/copy inversion at the start of this function\n\t\t\t\tvalue: clonePatchValueIfNeeded(copy_[i])\n\t\t\t})\n\t\t}\n\t\tif (base_.length < copy_.length) {\n\t\t\tinversePatches.push({\n\t\t\t\top: REPLACE,\n\t\t\t\tpath: basePath.concat([\"length\"]),\n\t\t\t\tvalue: base_.length\n\t\t\t})\n\t\t}\n\t}\n\n\t// This is used for both Map objects and normal objects.\n\tfunction generatePatchesFromAssigned(\n\t\tstate: MapState | ES5ObjectState | ProxyObjectState,\n\t\tbasePath: PatchPath,\n\t\tpatches: Patch[],\n\t\tinversePatches: Patch[]\n\t) {\n\t\tconst {base_, copy_} = state\n\t\teach(state.assigned_!, (key, assignedValue) => {\n\t\t\tconst origValue = get(base_, key)\n\t\t\tconst value = get(copy_!, key)\n\t\t\tconst op = !assignedValue ? REMOVE : has(base_, key) ? REPLACE : ADD\n\t\t\tif (origValue === value && op === REPLACE) return\n\t\t\tconst path = basePath.concat(key as any)\n\t\t\tpatches.push(op === REMOVE ? {op, path} : {op, path, value})\n\t\t\tinversePatches.push(\n\t\t\t\top === ADD\n\t\t\t\t\t? {op: REMOVE, path}\n\t\t\t\t\t: op === REMOVE\n\t\t\t\t\t? {op: ADD, path, value: clonePatchValueIfNeeded(origValue)}\n\t\t\t\t\t: {op: REPLACE, path, value: clonePatchValueIfNeeded(origValue)}\n\t\t\t)\n\t\t})\n\t}\n\n\tfunction generateSetPatches(\n\t\tstate: SetState,\n\t\tbasePath: PatchPath,\n\t\tpatches: Patch[],\n\t\tinversePatches: Patch[]\n\t) {\n\t\tlet {base_, copy_} = state\n\n\t\tlet i = 0\n\t\tbase_.forEach((value: any) => {\n\t\t\tif (!copy_!.has(value)) {\n\t\t\t\tconst path = basePath.concat([i])\n\t\t\t\tpatches.push({\n\t\t\t\t\top: REMOVE,\n\t\t\t\t\tpath,\n\t\t\t\t\tvalue\n\t\t\t\t})\n\t\t\t\tinversePatches.unshift({\n\t\t\t\t\top: ADD,\n\t\t\t\t\tpath,\n\t\t\t\t\tvalue\n\t\t\t\t})\n\t\t\t}\n\t\t\ti++\n\t\t})\n\t\ti = 0\n\t\tcopy_!.forEach((value: any) => {\n\t\t\tif (!base_.has(value)) {\n\t\t\t\tconst path = basePath.concat([i])\n\t\t\t\tpatches.push({\n\t\t\t\t\top: ADD,\n\t\t\t\t\tpath,\n\t\t\t\t\tvalue\n\t\t\t\t})\n\t\t\t\tinversePatches.unshift({\n\t\t\t\t\top: REMOVE,\n\t\t\t\t\tpath,\n\t\t\t\t\tvalue\n\t\t\t\t})\n\t\t\t}\n\t\t\ti++\n\t\t})\n\t}\n\n\tfunction generateReplacementPatches_(\n\t\tbaseValue: any,\n\t\treplacement: any,\n\t\tpatches: Patch[],\n\t\tinversePatches: Patch[]\n\t): void {\n\t\tpatches.push({\n\t\t\top: REPLACE,\n\t\t\tpath: [],\n\t\t\tvalue: replacement === NOTHING ? undefined : replacement\n\t\t})\n\t\tinversePatches.push({\n\t\t\top: REPLACE,\n\t\t\tpath: [],\n\t\t\tvalue: baseValue\n\t\t})\n\t}\n\n\tfunction applyPatches_<T>(draft: T, patches: Patch[]): T {\n\t\tpatches.forEach(patch => {\n\t\t\tconst {path, op} = patch\n\n\t\t\tlet base: any = draft\n\t\t\tfor (let i = 0; i < path.length - 1; i++) {\n\t\t\t\tconst parentType = getArchtype(base)\n\t\t\t\tlet p = path[i]\n\t\t\t\tif (typeof p !== \"string\" && typeof p !== \"number\") {\n\t\t\t\t\tp = \"\" + p\n\t\t\t\t}\n\n\t\t\t\t// See #738, avoid prototype pollution\n\t\t\t\tif (\n\t\t\t\t\t(parentType === Archtype.Object || parentType === Archtype.Array) &&\n\t\t\t\t\t(p === \"__proto__\" || p === \"constructor\")\n\t\t\t\t)\n\t\t\t\t\tdie(24)\n\t\t\t\tif (typeof base === \"function\" && p === \"prototype\") die(24)\n\t\t\t\tbase = get(base, p)\n\t\t\t\tif (typeof base !== \"object\") die(15, path.join(\"/\"))\n\t\t\t}\n\n\t\t\tconst type = getArchtype(base)\n\t\t\tconst value = deepClonePatchValue(patch.value) // used to clone patch to ensure original patch is not modified, see #411\n\t\t\tconst key = path[path.length - 1]\n\t\t\tswitch (op) {\n\t\t\t\tcase REPLACE:\n\t\t\t\t\tswitch (type) {\n\t\t\t\t\t\tcase Archtype.Map:\n\t\t\t\t\t\t\treturn base.set(key, value)\n\t\t\t\t\t\t/* istanbul ignore next */\n\t\t\t\t\t\tcase Archtype.Set:\n\t\t\t\t\t\t\tdie(16)\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t// if value is an object, then it's assigned by reference\n\t\t\t\t\t\t\t// in the following add or remove ops, the value field inside the patch will also be modifyed\n\t\t\t\t\t\t\t// so we use value from the cloned patch\n\t\t\t\t\t\t\t// @ts-ignore\n\t\t\t\t\t\t\treturn (base[key] = value)\n\t\t\t\t\t}\n\t\t\t\tcase ADD:\n\t\t\t\t\tswitch (type) {\n\t\t\t\t\t\tcase Archtype.Array:\n\t\t\t\t\t\t\treturn key === \"-\"\n\t\t\t\t\t\t\t\t? base.push(value)\n\t\t\t\t\t\t\t\t: base.splice(key as any, 0, value)\n\t\t\t\t\t\tcase Archtype.Map:\n\t\t\t\t\t\t\treturn base.set(key, value)\n\t\t\t\t\t\tcase Archtype.Set:\n\t\t\t\t\t\t\treturn base.add(value)\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\treturn (base[key] = value)\n\t\t\t\t\t}\n\t\t\t\tcase REMOVE:\n\t\t\t\t\tswitch (type) {\n\t\t\t\t\t\tcase Archtype.Array:\n\t\t\t\t\t\t\treturn base.splice(key as any, 1)\n\t\t\t\t\t\tcase Archtype.Map:\n\t\t\t\t\t\t\treturn base.delete(key)\n\t\t\t\t\t\tcase Archtype.Set:\n\t\t\t\t\t\t\treturn base.delete(patch.value)\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\treturn delete base[key]\n\t\t\t\t\t}\n\t\t\t\tdefault:\n\t\t\t\t\tdie(17, op)\n\t\t\t}\n\t\t})\n\n\t\treturn draft\n\t}\n\n\t// optimize: this is quite a performance hit, can we detect intelligently when it is needed?\n\t// E.g. auto-draft when new objects from outside are assigned and modified?\n\t// (See failing test when deepClone just returns obj)\n\tfunction deepClonePatchValue<T>(obj: T): T\n\tfunction deepClonePatchValue(obj: any) {\n\t\tif (!isDraftable(obj)) return obj\n\t\tif (Array.isArray(obj)) return obj.map(deepClonePatchValue)\n\t\tif (isMap(obj))\n\t\t\treturn new Map(\n\t\t\t\tArray.from(obj.entries()).map(([k, v]) => [k, deepClonePatchValue(v)])\n\t\t\t)\n\t\tif (isSet(obj)) return new Set(Array.from(obj).map(deepClonePatchValue))\n\t\tconst cloned = Object.create(Object.getPrototypeOf(obj))\n\t\tfor (const key in obj) cloned[key] = deepClonePatchValue(obj[key])\n\t\tif (has(obj, immerable)) cloned[immerable] = obj[immerable]\n\t\treturn cloned\n\t}\n\n\tfunction clonePatchValueIfNeeded<T>(obj: T): T {\n\t\tif (isDraft(obj)) {\n\t\t\treturn deepClonePatchValue(obj)\n\t\t} else return obj\n\t}\n\n\tloadPlugin(\"Patches\", {\n\t\tapplyPatches_,\n\t\tgeneratePatches_,\n\t\tgenerateReplacementPatches_\n\t})\n}\n", "// types only!\nimport {\n\tImmerState,\n\tAnyMap,\n\tAnySet,\n\tMapState,\n\tSetState,\n\tDRAFT_STATE,\n\tgetCurrentScope,\n\tlatest,\n\titeratorSymbol,\n\tisDraftable,\n\tcreateProxy,\n\tloadPlugin,\n\tmarkChanged,\n\tProxyType,\n\tdie,\n\teach\n} from \"../internal\"\n\nexport function enableMapSet() {\n\t/* istanbul ignore next */\n\tvar extendStatics = function(d: any, b: any): any {\n\t\textendStatics =\n\t\t\tObject.setPrototypeOf ||\n\t\t\t({__proto__: []} instanceof Array &&\n\t\t\t\tfunction(d, b) {\n\t\t\t\t\td.__proto__ = b\n\t\t\t\t}) ||\n\t\t\tfunction(d, b) {\n\t\t\t\tfor (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]\n\t\t\t}\n\t\treturn extendStatics(d, b)\n\t}\n\n\t// Ugly hack to resolve #502 and inherit built in Map / Set\n\tfunction __extends(d: any, b: any): any {\n\t\textendStatics(d, b)\n\t\tfunction __(this: any): any {\n\t\t\tthis.constructor = d\n\t\t}\n\t\td.prototype =\n\t\t\t// @ts-ignore\n\t\t\t((__.prototype = b.prototype), new __())\n\t}\n\n\tconst DraftMap = (function(_super) {\n\t\t__extends(DraftMap, _super)\n\t\t// Create class manually, cause #502\n\t\tfunction DraftMap(this: any, target: AnyMap, parent?: ImmerState): any {\n\t\t\tthis[DRAFT_STATE] = {\n\t\t\t\ttype_: ProxyType.Map,\n\t\t\t\tparent_: parent,\n\t\t\t\tscope_: parent ? parent.scope_ : getCurrentScope()!,\n\t\t\t\tmodified_: false,\n\t\t\t\tfinalized_: false,\n\t\t\t\tcopy_: undefined,\n\t\t\t\tassigned_: undefined,\n\t\t\t\tbase_: target,\n\t\t\t\tdraft_: this as any,\n\t\t\t\tisManual_: false,\n\t\t\t\trevoked_: false\n\t\t\t} as MapState\n\t\t\treturn this\n\t\t}\n\t\tconst p = DraftMap.prototype\n\n\t\tObject.defineProperty(p, \"size\", {\n\t\t\tget: function() {\n\t\t\t\treturn latest(this[DRAFT_STATE]).size\n\t\t\t}\n\t\t\t// enumerable: false,\n\t\t\t// configurable: true\n\t\t})\n\n\t\tp.has = function(key: any): boolean {\n\t\t\treturn latest(this[DRAFT_STATE]).has(key)\n\t\t}\n\n\t\tp.set = function(key: any, value: any) {\n\t\t\tconst state: MapState = this[DRAFT_STATE]\n\t\t\tassertUnrevoked(state)\n\t\t\tif (!latest(state).has(key) || latest(state).get(key) !== value) {\n\t\t\t\tprepareMapCopy(state)\n\t\t\t\tmarkChanged(state)\n\t\t\t\tstate.assigned_!.set(key, true)\n\t\t\t\tstate.copy_!.set(key, value)\n\t\t\t\tstate.assigned_!.set(key, true)\n\t\t\t}\n\t\t\treturn this\n\t\t}\n\n\t\tp.delete = function(key: any): boolean {\n\t\t\tif (!this.has(key)) {\n\t\t\t\treturn false\n\t\t\t}\n\n\t\t\tconst state: MapState = this[DRAFT_STATE]\n\t\t\tassertUnrevoked(state)\n\t\t\tprepareMapCopy(state)\n\t\t\tmarkChanged(state)\n\t\t\tif (state.base_.has(key)) {\n\t\t\t\tstate.assigned_!.set(key, false)\n\t\t\t} else {\n\t\t\t\tstate.assigned_!.delete(key)\n\t\t\t}\n\t\t\tstate.copy_!.delete(key)\n\t\t\treturn true\n\t\t}\n\n\t\tp.clear = function() {\n\t\t\tconst state: MapState = this[DRAFT_STATE]\n\t\t\tassertUnrevoked(state)\n\t\t\tif (latest(state).size) {\n\t\t\t\tprepareMapCopy(state)\n\t\t\t\tmarkChanged(state)\n\t\t\t\tstate.assigned_ = new Map()\n\t\t\t\teach(state.base_, key => {\n\t\t\t\t\tstate.assigned_!.set(key, false)\n\t\t\t\t})\n\t\t\t\tstate.copy_!.clear()\n\t\t\t}\n\t\t}\n\n\t\tp.forEach = function(\n\t\t\tcb: (value: any, key: any, self: any) => void,\n\t\t\tthisArg?: any\n\t\t) {\n\t\t\tconst state: MapState = this[DRAFT_STATE]\n\t\t\tlatest(state).forEach((_value: any, key: any, _map: any) => {\n\t\t\t\tcb.call(thisArg, this.get(key), key, this)\n\t\t\t})\n\t\t}\n\n\t\tp.get = function(key: any): any {\n\t\t\tconst state: MapState = this[DRAFT_STATE]\n\t\t\tassertUnrevoked(state)\n\t\t\tconst value = latest(state).get(key)\n\t\t\tif (state.finalized_ || !isDraftable(value)) {\n\t\t\t\treturn value\n\t\t\t}\n\t\t\tif (value !== state.base_.get(key)) {\n\t\t\t\treturn value // either already drafted or reassigned\n\t\t\t}\n\t\t\t// despite what it looks, this creates a draft only once, see above condition\n\t\t\tconst draft = createProxy(state.scope_.immer_, value, state)\n\t\t\tprepareMapCopy(state)\n\t\t\tstate.copy_!.set(key, draft)\n\t\t\treturn draft\n\t\t}\n\n\t\tp.keys = function(): IterableIterator<any> {\n\t\t\treturn latest(this[DRAFT_STATE]).keys()\n\t\t}\n\n\t\tp.values = function(): IterableIterator<any> {\n\t\t\tconst iterator = this.keys()\n\t\t\treturn {\n\t\t\t\t[iteratorSymbol]: () => this.values(),\n\t\t\t\tnext: () => {\n\t\t\t\t\tconst r = iterator.next()\n\t\t\t\t\t/* istanbul ignore next */\n\t\t\t\t\tif (r.done) return r\n\t\t\t\t\tconst value = this.get(r.value)\n\t\t\t\t\treturn {\n\t\t\t\t\t\tdone: false,\n\t\t\t\t\t\tvalue\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} as any\n\t\t}\n\n\t\tp.entries = function(): IterableIterator<[any, any]> {\n\t\t\tconst iterator = this.keys()\n\t\t\treturn {\n\t\t\t\t[iteratorSymbol]: () => this.entries(),\n\t\t\t\tnext: () => {\n\t\t\t\t\tconst r = iterator.next()\n\t\t\t\t\t/* istanbul ignore next */\n\t\t\t\t\tif (r.done) return r\n\t\t\t\t\tconst value = this.get(r.value)\n\t\t\t\t\treturn {\n\t\t\t\t\t\tdone: false,\n\t\t\t\t\t\tvalue: [r.value, value]\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} as any\n\t\t}\n\n\t\tp[iteratorSymbol] = function() {\n\t\t\treturn this.entries()\n\t\t}\n\n\t\treturn DraftMap\n\t})(Map)\n\n\tfunction proxyMap_<T extends AnyMap>(target: T, parent?: ImmerState): T {\n\t\t// @ts-ignore\n\t\treturn new DraftMap(target, parent)\n\t}\n\n\tfunction prepareMapCopy(state: MapState) {\n\t\tif (!state.copy_) {\n\t\t\tstate.assigned_ = new Map()\n\t\t\tstate.copy_ = new Map(state.base_)\n\t\t}\n\t}\n\n\tconst DraftSet = (function(_super) {\n\t\t__extends(DraftSet, _super)\n\t\t// Create class manually, cause #502\n\t\tfunction DraftSet(this: any, target: AnySet, parent?: ImmerState) {\n\t\t\tthis[DRAFT_STATE] = {\n\t\t\t\ttype_: ProxyType.Set,\n\t\t\t\tparent_: parent,\n\t\t\t\tscope_: parent ? parent.scope_ : getCurrentScope()!,\n\t\t\t\tmodified_: false,\n\t\t\t\tfinalized_: false,\n\t\t\t\tcopy_: undefined,\n\t\t\t\tbase_: target,\n\t\t\t\tdraft_: this,\n\t\t\t\tdrafts_: new Map(),\n\t\t\t\trevoked_: false,\n\t\t\t\tisManual_: false\n\t\t\t} as SetState\n\t\t\treturn this\n\t\t}\n\t\tconst p = DraftSet.prototype\n\n\t\tObject.defineProperty(p, \"size\", {\n\t\t\tget: function() {\n\t\t\t\treturn latest(this[DRAFT_STATE]).size\n\t\t\t}\n\t\t\t// enumerable: true,\n\t\t})\n\n\t\tp.has = function(value: any): boolean {\n\t\t\tconst state: SetState = this[DRAFT_STATE]\n\t\t\tassertUnrevoked(state)\n\t\t\t// bit of trickery here, to be able to recognize both the value, and the draft of its value\n\t\t\tif (!state.copy_) {\n\t\t\t\treturn state.base_.has(value)\n\t\t\t}\n\t\t\tif (state.copy_.has(value)) return true\n\t\t\tif (state.drafts_.has(value) && state.copy_.has(state.drafts_.get(value)))\n\t\t\t\treturn true\n\t\t\treturn false\n\t\t}\n\n\t\tp.add = function(value: any): any {\n\t\t\tconst state: SetState = this[DRAFT_STATE]\n\t\t\tassertUnrevoked(state)\n\t\t\tif (!this.has(value)) {\n\t\t\t\tprepareSetCopy(state)\n\t\t\t\tmarkChanged(state)\n\t\t\t\tstate.copy_!.add(value)\n\t\t\t}\n\t\t\treturn this\n\t\t}\n\n\t\tp.delete = function(value: any): any {\n\t\t\tif (!this.has(value)) {\n\t\t\t\treturn false\n\t\t\t}\n\n\t\t\tconst state: SetState = this[DRAFT_STATE]\n\t\t\tassertUnrevoked(state)\n\t\t\tprepareSetCopy(state)\n\t\t\tmarkChanged(state)\n\t\t\treturn (\n\t\t\t\tstate.copy_!.delete(value) ||\n\t\t\t\t(state.drafts_.has(value)\n\t\t\t\t\t? state.copy_!.delete(state.drafts_.get(value))\n\t\t\t\t\t: /* istanbul ignore next */ false)\n\t\t\t)\n\t\t}\n\n\t\tp.clear = function() {\n\t\t\tconst state: SetState = this[DRAFT_STATE]\n\t\t\tassertUnrevoked(state)\n\t\t\tif (latest(state).size) {\n\t\t\t\tprepareSetCopy(state)\n\t\t\t\tmarkChanged(state)\n\t\t\t\tstate.copy_!.clear()\n\t\t\t}\n\t\t}\n\n\t\tp.values = function(): IterableIterator<any> {\n\t\t\tconst state: SetState = this[DRAFT_STATE]\n\t\t\tassertUnrevoked(state)\n\t\t\tprepareSetCopy(state)\n\t\t\treturn state.copy_!.values()\n\t\t}\n\n\t\tp.entries = function entries(): IterableIterator<[any, any]> {\n\t\t\tconst state: SetState = this[DRAFT_STATE]\n\t\t\tassertUnrevoked(state)\n\t\t\tprepareSetCopy(state)\n\t\t\treturn state.copy_!.entries()\n\t\t}\n\n\t\tp.keys = function(): IterableIterator<any> {\n\t\t\treturn this.values()\n\t\t}\n\n\t\tp[iteratorSymbol] = function() {\n\t\t\treturn this.values()\n\t\t}\n\n\t\tp.forEach = function forEach(cb: any, thisArg?: any) {\n\t\t\tconst iterator = this.values()\n\t\t\tlet result = iterator.next()\n\t\t\twhile (!result.done) {\n\t\t\t\tcb.call(thisArg, result.value, result.value, this)\n\t\t\t\tresult = iterator.next()\n\t\t\t}\n\t\t}\n\n\t\treturn DraftSet\n\t})(Set)\n\n\tfunction proxySet_<T extends AnySet>(target: T, parent?: ImmerState): T {\n\t\t// @ts-ignore\n\t\treturn new DraftSet(target, parent)\n\t}\n\n\tfunction prepareSetCopy(state: SetState) {\n\t\tif (!state.copy_) {\n\t\t\t// create drafts for all entries to preserve insertion order\n\t\t\tstate.copy_ = new Set()\n\t\t\tstate.base_.forEach(value => {\n\t\t\t\tif (isDraftable(value)) {\n\t\t\t\t\tconst draft = createProxy(state.scope_.immer_, value, state)\n\t\t\t\t\tstate.drafts_.set(value, draft)\n\t\t\t\t\tstate.copy_!.add(draft)\n\t\t\t\t} else {\n\t\t\t\t\tstate.copy_!.add(value)\n\t\t\t\t}\n\t\t\t})\n\t\t}\n\t}\n\n\tfunction assertUnrevoked(state: any /*ES5State | MapState | SetState*/) {\n\t\tif (state.revoked_) die(3, JSON.stringify(latest(state)))\n\t}\n\n\tloadPlugin(\"MapSet\", {proxyMap_, proxySet_})\n}\n", "import {enableES5} from \"./es5\"\nimport {enableMapSet} from \"./mapset\"\nimport {enablePatches} from \"./patches\"\n\nexport function enableAllPlugins() {\n\tenableES5()\n\tenableMapSet()\n\tenablePatches()\n}\n", "import {\n\tIProduce,\n\tIProduceWithPatches,\n\tImmer,\n\tDraft,\n\tImmutable\n} from \"./internal\"\n\nexport {\n\tDraft,\n\tImmutable,\n\tPatch,\n\tPatchListener,\n\toriginal,\n\tcurrent,\n\tisDraft,\n\tisDraftable,\n\tNOTHING as nothing,\n\tDRAFTABLE as immerable,\n\tfreeze\n} from \"./internal\"\n\nconst immer = new Immer()\n\n/**\n * The `produce` function takes a value and a \"recipe function\" (whose\n * return value often depends on the base state). The recipe function is\n * free to mutate its first argument however it wants. All mutations are\n * only ever applied to a __copy__ of the base state.\n *\n * Pass only a function to create a \"curried producer\" which relieves you\n * from passing the recipe function every time.\n *\n * Only plain objects and arrays are made mutable. All other objects are\n * considered uncopyable.\n *\n * Note: This function is __bound__ to its `Immer` instance.\n *\n * @param {any} base - the initial state\n * @param {Function} producer - function that receives a proxy of the base state as first argument and which can be freely modified\n * @param {Function} patchListener - optional function that will be called with all the patches produced here\n * @returns {any} a new state, or the initial state if nothing was modified\n */\nexport const produce: IProduce = immer.produce\nexport default produce\n\n/**\n * Like `produce`, but `produceWithPatches` always returns a tuple\n * [nextState, patches, inversePatches] (instead of just the next state)\n */\nexport const produceWithPatches: IProduceWithPatches = immer.produceWithPatches.bind(\n\timmer\n)\n\n/**\n * Pass true to automatically freeze all copies created by Immer.\n *\n * Always freeze by default, even in production mode\n */\nexport const setAutoFreeze = immer.setAutoFreeze.bind(immer)\n\n/**\n * Pass true to use the ES2015 `Proxy` class when creating drafts, which is\n * always faster than using ES5 proxies.\n *\n * By default, feature detection is used, so calling this is rarely necessary.\n */\nexport const setUseProxies = immer.setUseProxies.bind(immer)\n\n/**\n * Apply an array of Immer patches to the first argument.\n *\n * This function is a producer, which means copy-on-write is in effect.\n */\nexport const applyPatches = immer.applyPatches.bind(immer)\n\n/**\n * Create an Immer draft from the given base state, which may be a draft itself.\n * The draft can be modified until you finalize it with the `finishDraft` function.\n */\nexport const createDraft = immer.createDraft.bind(immer)\n\n/**\n * Finalize an Immer draft from a `createDraft` call, returning the base state\n * (if no changes were made) or a modified copy. The draft must *not* be\n * mutated afterwards.\n *\n * Pass a function as the 2nd argument to generate Immer patches based on the\n * changes that were made.\n */\nexport const finishDraft = immer.finishDraft.bind(immer)\n\n/**\n * This function is actually a no-op, but can be used to cast an immutable type\n * to an draft type and make TypeScript happy\n *\n * @param value\n */\nexport function castDraft<T>(value: T): Draft<T> {\n\treturn value as any\n}\n\n/**\n * This function is actually a no-op, but can be used to cast a mutable type\n * to an immutable type and make TypeScript happy\n * @param value\n */\nexport function castImmutable<T>(value: T): Immutable<T> {\n\treturn value as any\n}\n\nexport {Immer}\n\nexport {enableES5} from \"./plugins/es5\"\nexport {enablePatches} from \"./plugins/patches\"\nexport {enableMapSet} from \"./plugins/mapset\"\nexport {enableAllPlugins} from \"./plugins/all\"\n", "\n'use strict'\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./immer.cjs.production.min.js')\n} else {\n  module.exports = require('./immer.cjs.development.js')\n}\n"],
  "mappings": "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",
  "names": ["hasSymbol", "Symbol", "hasMap", "Map", "hasSet", "Set", "hasProxies", "Proxy", "revocable", "Reflect", "NOTHING", "for", "DRAFTABLE", "DRAFT_STATE", "iteratorSymbol", "iterator", "errors", "data", "path", "op", "plugin", "thing", "die", "error", "args", "e", "msg", "apply", "Error", "isDraft", "value", "isDraftable", "isPlainObject", "Array", "isArray", "constructor", "isMap", "isSet", "objectCtorString", "Object", "prototype", "toString", "proto", "getPrototypeOf", "Ctor", "hasOwnProperty", "call", "Function", "original", "base_", "ownKeys", "getOwnPropertySymbols", "obj", "getOwnPropertyNames", "concat", "getOwnPropertyDescriptors", "target", "res", "forEach", "key", "getOwnPropertyDescriptor", "each", "iter", "enumerableOnly", "getArchtype", "keys", "entry", "index", "state", "type_", "has", "prop", "get", "set", "propOrOldValue", "t", "add", "is", "x", "y", "latest", "copy_", "shallowCopy", "base", "slice", "descriptors", "i", "length", "desc", "writable", "configurable", "enumerable", "create", "freeze", "deep", "isFrozen", "clear", "delete", "dontMutateFrozenCollections", "plugins", "getPlugin", "pluginKey", "loadPlugin", "implementation", "currentScope", "getCurrentScope", "createScope", "parent_", "immer_", "drafts_", "canAutoFreeze_", "unfinalizedDrafts_", "usePatchesInScope", "scope", "patchListener", "patches_", "inversePatches_", "patchListener_", "revokeScope", "leaveScope", "revokeDraft", "enterScope", "immer", "draft", "revoke_", "revoked_", "processResult", "result", "baseDraft", "isReplaced", "undefined", "useProxies_", "willFinalizeES5_", "modified_", "finalize", "maybeFreeze", "generateReplacementPatches_", "rootScope", "childValue", "finalizeProperty", "scope_", "finalized_", "draft_", "resultEach", "generatePatches_", "parentState", "targetObject", "rootPath", "targetIsSet", "assigned_", "autoFreeze_", "createProxyProxy", "parent", "isManual_", "traps", "objectTraps", "arrayTraps", "revoke", "proxy", "source", "readPropFromProto", "peek", "prepareCopy", "createProxy", "getDescriptorFromProto", "current", "currentState", "markChanged", "Number", "isNaN", "deleteProperty", "owner", "defineProperty", "setPrototypeOf", "fn", "arguments", "parseInt", "Immer", "config", "recipe", "defaultBase", "self", "curriedProduce", "produce", "hasError", "Promise", "then", "p", "ip", "produceWithPatches", "patches", "inversePatches", "nextState", "useProxies", "setUseProxies", "autoFreeze", "setAutoFreeze", "createDraft", "finishDraft", "applyPatches", "patch", "applyPatchesImpl", "applyPatches_", "proxyMap_", "proxySet_", "createES5Proxy_", "push", "currentImpl", "copy", "archType", "hasChanges_", "copyHelper", "from", "enableES5", "markChangesRecursively", "markChangesSweep", "createES5Draft", "proxyProperty", "assertUnrevoked", "drafts", "hasArrayChanges", "hasObjectChanges", "object", "min", "Math", "baseValue", "baseIsDraft", "descriptor", "JSON", "stringify", "enablePatches", "REPLACE", "ADD", "REMOVE", "basePath", "generatePatchesFromAssigned", "generateArrayPatches", "generateSetPatches", "_ref", "_ref2", "clonePatchValueIfNeeded", "assignedValue", "origValue", "unshift", "replacement", "parentType", "join", "type", "deepClonePatchValue", "splice", "map", "entries", "k", "v", "cloned", "immerable", "enableMapSet", "extendStatics", "d", "b", "__proto__", "__extends", "__", "DraftMap", "_super", "size", "prepareMapCopy", "cb", "thisArg", "_value", "_map", "values", "next", "r", "done", "DraftSet", "prepareSetCopy", "enableAllPlugins", "bind", "castDraft", "castImmutable"]
}
